{"version":3,"sources":["Fetch.js","App.js","serviceWorker.js","index.js"],"names":["fetchMachine","Machine","id","initial","context","promise","states","none","on","FETCH","target","actions","loading","invoke","src","event","fetch","url","then","response","json","onDone","assign","data","console","log","onError","error","cancelled","failure","success","dofetch","Fetch","props","useMachine","devTools","current","send","useEffect","value","message","App","React","useState","state","setState","className","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"oSAIMA,EAAeC,YAAQ,CAC3BC,GAAI,QACJC,QAAS,OACTC,QAAS,CACPC,QAAS,MAEXC,OAAQ,CACNC,KAAM,CACJC,GAAI,CACFC,MAAO,CACLC,OAAQ,UACRC,QAAS,aAIfC,QAAS,CACPC,OAAQ,CACNX,GAAI,UACJY,IAAK,SAACV,EAASW,GAAV,OAAoBC,MAAMD,EAAME,KAAKC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WACpEC,OAAQ,CACNX,OAAQ,UACRC,QAASW,YAAO,CAAEC,KAAM,SAACnB,EAASW,GAEhC,OADAS,QAAQC,IAAIV,EAAOX,GACZW,EAAMQ,SAGjBG,QAAS,CACPhB,OAAQ,UACRC,QAASW,YAAO,CAAEK,MAAO,SAACvB,EAASW,GAEjC,OADAS,QAAQC,IAAIrB,EAASW,GACdA,EAAMQ,WAKrBK,UAAW,CACTpB,GAAI,CAAEC,MAAO,YAEfoB,QAAS,CACPrB,GAAI,CAAEC,MAAO,YAEfqB,QAAS,CACPtB,GAAI,CAAEC,MAAO,cAGhB,CACCE,QAAS,CACPoB,QAAS,SAAC3B,EAASW,GACjBS,QAAQC,IAAI,eAAgBrB,EAASW,GACrCX,EAAQC,QAAUW,MAAMD,EAAME,KAAKC,MAAK,SAACC,GACvCG,YAAO,CACLH,oBAQCa,EAAQ,SAACC,GAAW,IAAD,EACNC,qBAAWlC,EAAc,CAACmC,UAAU,IAD9B,mBACvBC,EADuB,KACdC,EADc,KA8B9B,OA5BAC,qBAAU,WACRd,QAAQC,IAAI,yBACU,SAAlBW,EAAQG,OAAoBH,EAAQhC,QAAQa,MAAQgB,EAAMhB,MAC5DO,QAAQC,IAAI,mCACZY,EAAK,QAAS,CAAEpB,IAAKgB,EAAMhB,SAuB5B,CAACgB,EAAMhB,IAAKoB,EAAMD,EAAQG,MAAOH,EAAQhC,QAAQa,MAElD,6BACE,8CAAoBmB,EAAQG,MAA5B,KACe,YAAlBH,EAAQG,OAAuB,qCAAWH,EAAQhC,QAAQuB,MAAMa,WC7EpDC,MAff,WAAgB,IAAD,EACaC,IAAMC,UAAS,GAD5B,mBACNC,EADM,KACCC,EADD,KAEb,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,sHAGA,4BAAQC,QAAS,kBAAMF,GAAUD,KAAjC,UACCA,GAAS,kBAAC,EAAD,CAAO3B,IAAI,sCCDT+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLH,QAAQG,MAAMA,EAAMa,c","file":"static/js/main.3d1a12dc.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useMachine } from '@xstate/react';\nimport { Machine, assign, send } from 'xstate';\n \nconst fetchMachine = Machine({\n  id: 'fetch',\n  initial: 'none',\n  context: {\n    promise: null,\n  },\n  states: {\n    none: {\n      on: {\n        FETCH: {\n          target: 'loading',\n          actions: 'dofetch'\n        },\n      },\n    },\n    loading: {\n      invoke: {\n        id: 'doFetch',\n        src: (context, event) => fetch(event.url).then(response => response.json()),\n        onDone: {\n          target: 'success',\n          actions: assign({ data: (context, event) => {\n            console.log(event, context);\n            return event.data\n          }})\n        },\n        onError: {\n          target: 'failure',\n          actions: assign({ error: (context, event) => {\n            console.log(context, event);\n            return event.data;\n          }})\n        }\n      }\n    },\n    cancelled: {\n      on: { FETCH: 'loading' }\n    },\n    failure: {\n      on: { FETCH: 'loading' }\n    },\n    success: {\n      on: { FETCH: 'loading' }\n    },\n  }\n}, {\n    actions: {\n      dofetch: (context, event) => {\n        console.log('#### dofetch', context, event);\n        context.promise = fetch(event.url).then((response) => {\n          assign({\n            response\n          });\n          return \n        });\n      }\n    },\n});\n \nexport const Fetch = (props) => {\n  const [current, send] = useMachine(fetchMachine, {devTools: true});\n  useEffect(() => {\n    console.log('Fetch.useEffect, init');\n    if (current.value === 'none' && current.context.url !== props.url) {\n      console.log('Fetch.useEffect, value === none');\n      send('FETCH', { url: props.url });\n    }\n      // trigger the fetch on didMount effect\n      // fetch(props.url).then((response) => {\n      //   console.log('Fetch.useEffect, fetch response,', response);\n      //   if (response.ok) {\n      //     if (response.status < 400) {\n      //       console.log('Fetch.useEffect, return response.json');\n      //       return response.json();\n      //     }\n      //   }\n      // }).then((response) => {\n      //   console.log('Fetch.useEffect, send LOADED');\n      //   send('LOADED');\n      //   setContent(response);\n      // }\n\n      // ).catch((error) => {\n      //   console.error('Fetch.useEffect, ERROR', error);\n      //   send('ERROR');\n      //   setContent(error);\n      // });\n    // }\n  }, [props.url, send, current.value, current.context.url]);\n  return (\n    <div>\n      <p>Current status: {current.value} </p>\n  {current.value === 'failure' && <p>Error: {current.context.error.message}</p>}\n      \n    </div>\n  );\n};","import React from 'react';\nimport './App.css';\nimport { Fetch } from './Fetch';\n\nfunction App() {\n  const [state, setState] = React.useState(true);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          The goal here is to test X-State with fetch and see how we can handle complex scenarios\n        </p>\n        <button onClick={() => setState(!state)}>Toggle</button>\n        {state && <Fetch url=\"https://cat-fact.herokuapp.com\" />}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}